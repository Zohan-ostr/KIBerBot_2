from telebot import types
from data_manager import DataManager
from keyboard_manager import KeyboardManager
from config import Config
import os

class AdminManager:
    def __init__(self, bot):
        self.bot = bot
        self.user_states = {}

    def check_admin(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return user_id in Config.ADMIN_IDS

    def handle_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin"""
        if self.check_admin(message.chat.id):
            self.bot.send_message(
                message.chat.id,
                "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
                reply_markup=KeyboardManager.admin_menu()
            )
        else:
            self.bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")

    def handle_callback(self, call):
        if not self.check_admin(call.message.chat.id):
            self.bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        try:
            if call.data == 'admin_add':
                self._show_add_menu(call)
            elif call.data == 'admin_add_dept':
                self._show_department_selection(call)
            elif call.data.startswith('admin_add_dept_'):
                self._start_adding_department(call)
            elif call.data == 'admin_add_event':
                self._start_adding_event(call)
        except Exception as e:
            self.bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
            print(f"Error in callback: {str(e)}")

    def handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞"""
        user_id = message.chat.id
        if user_id not in self.user_states:
            return

        state = self.user_states[user_id].get("state")
        
        if state == "adding_department_text":
            self._process_department_text(message)
        elif state == "adding_event_text":
            self._process_event_text(message)

    def handle_photo(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞"""
        user_id = message.chat.id
        if user_id not in self.user_states:
            return

        state = self.user_states[user_id].get("state")
        
        if state == "adding_department_photo":
            self._process_department_photo(message)
        elif state == "adding_event_photo":
            self._process_event_photo(message)

    # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    def _show_add_menu(self, call):
        markup = types.InlineKeyboardMarkup(row_width=2)
        dept_btn = types.InlineKeyboardButton("–ö–∞—Ñ–µ–¥—Ä—É", callback_data='admin_add_dept')
        event_btn = types.InlineKeyboardButton("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data='admin_add_event')
        markup.add(dept_btn, event_btn)
        
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
            reply_markup=markup
        )

    def _show_department_selection(self, call):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ñ–µ–¥—Ä—ã"""
        markup = types.InlineKeyboardMarkup(row_width=2)
        buttons = [
            types.InlineKeyboardButton(
                name,
                callback_data=f"admin_add_dept_{key}"
            ) for key, name in Config.DEPARTMENTS.items()
        ]
        markup.add(*buttons)
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back'))
        
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ–¥—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=markup
        )

    def _start_adding_department(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ñ–µ–¥—Ä—ã"""
        department_key = call.data.split('admin_add_dept_')[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ñ–µ–¥—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if department_key not in Config.DEPARTMENTS:
            self.bot.answer_callback_query(call.id, "‚ùå –ö–∞—Ñ–µ–¥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.user_states[call.message.chat.id] = {
            "state": "adding_department_text",
            "department": department_key,
            "message_id": call.message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        }
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        self.bot.send_message(
            call.message.chat.id,
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ñ–µ–¥—Ä—ã {Config.DEPARTMENTS[department_key]}:",
            reply_markup=types.ReplyKeyboardRemove()
        )

    def _process_department_text(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–∞—Ñ–µ–¥—Ä—ã"""
        if message.chat.id not in self.user_states:
            return
            
        department_key = self.user_states[message.chat.id]["department"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.user_states[message.chat.id].update({
            "text": message.text,
            "state": "adding_department_photo"
        })
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        self.bot.send_message(
            message.chat.id,
            f"üì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ñ–µ–¥—Ä—ã {Config.DEPARTMENTS[department_key]}:",
            reply_markup=types.ReplyKeyboardRemove()
        )

    def _process_department_photo(self, message):
        department = self.user_states[message.chat.id]["department"]
        text = self.user_states[message.chat.id]["text"]
        photo = DataManager.save_photo(message.photo[-1].file_id, self.bot)
        
        DataManager.update_department(department, text, photo)
        self.bot.send_message(
            message.chat.id,
            f"‚úÖ –ö–∞—Ñ–µ–¥—Ä–∞ {Config.DEPARTMENTS[department]} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=KeyboardManager.template_menu()
        )
        del self.user_states[message.chat.id]

    def _start_adding_event(self, call):
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        self.user_states[call.message.chat.id] = {
            "state": "adding_event_text"
        }
        self.bot.send_message(
            call.message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )

    def _process_event_text(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        self.user_states[message.chat.id].update({
            "text": message.text,
            "state": "adding_event_photo"
        })
        self.bot.send_message(
            message.chat.id,
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )

    def _process_event_photo(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        text = self.user_states[message.chat.id]["text"]
        photo = DataManager.save_photo(message.photo[-1].file_id, self.bot)
        
        DataManager.add_event(text, photo)
        self.bot.send_message(
            message.chat.id,
            "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=KeyboardManager.template_menu()
        )
        del self.user_states[message.chat.id]